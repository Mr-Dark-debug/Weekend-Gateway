import 'dart:convert';
import 'package:weekend_gateway/models/trip_model.dart';
import 'package:weekend_gateway/models/trip_day_model.dart';
import 'package:weekend_gateway/models/trip_activity_model.dart';
import 'package:uuid/uuid.dart'; // For generating IDs for new models

class AIService {
  final Uuid _uuid = const Uuid();

  Future<String> generateItineraryRaw(Map<String, dynamic> preferences) async {
    // Construct a prompt (simplified for this mock)
    String prompt =
        "Generate a travel itinerary for a trip to ${preferences['destination']} "
        "for ${preferences['duration']} days. "
        "Interests: ${preferences['interests']}. "
        "Budget: ${preferences['budget']}. "
        "Include a title, overall description, location string, cover image URL, latitude, longitude, price_level (1-3), and a list of days. "
        "Each day should have a day_number, title, and a list of activities. "
        "Each activity should have a title, description, location_name, time, and optional latitude/longitude.";

    // Simulate network delay
    await Future.delayed(const Duration(seconds: 2));

    // Mocked API Response
    // This response should be structured like the example provided in the task.
    // For simplicity, using a fixed example. In a real scenario, this would vary.
    if (preferences['destination'].toLowerCase().contains('paris')) {
      return Future.value(
        jsonEncode({
          "title": "AI Generated Paris Weekend",
          "location": "Paris, France",
          "duration_days":
              preferences['duration'] ?? 3, // Use provided duration
          "is_public": false,
          "description":
              "An amazing ${preferences['duration'] ?? 3}-day trip to Paris, generated by AI, focusing on ${preferences['interests']}.",
          "cover_image_url":
              "https://images.unsplash.com/photo-1502602898657-3e91760cbb34?q=80&w=1200", // More generic Paris image
          "latitude": 48.8566,
          "longitude": 2.3522,
          "price_level": _getMockPriceLevel(preferences['budget']),
          "days": [
            {
              "day_number": 1,
              "title": "Arrival & Iconic Landmarks",
              "activities": [
                {
                  "title": "Arrive in Paris & Check-in",
                  "description":
                      "Settle into your accommodation and take a moment to relax.",
                  "location_name": "Your Hotel in Central Paris",
                  "time": "14:00",
                },
                {
                  "title": "Eiffel Tower Experience",
                  "description":
                      "Visit the iconic Eiffel Tower. Consider pre-booking tickets. Enjoy the views from the top.",
                  "location_name":
                      "Eiffel Tower, Champ de Mars, 5 Avenue Anatole France, 75007 Paris",
                  "time": "16:00",
                  "latitude": 48.8584,
                  "longitude": 2.2945,
                },
                {
                  "title": "Seine River Cruise",
                  "description":
                      "Enjoy a relaxing evening cruise on the Seine River to see illuminated monuments.",
                  "location_name": "Various points along the Seine",
                  "time": "19:00",
                },
              ],
            },
            {
              "day_number": 2,
              "title": "Art & Culture",
              "activities": [
                {
                  "title": "Louvre Museum Visit",
                  "description":
                      "Explore masterpieces like the Mona Lisa and Venus de Milo. Allocate several hours.",
                  "location_name": "Louvre Museum, Rue de Rivoli, 75001 Paris",
                  "time": "10:00",
                  "latitude": 48.8606,
                  "longitude": 2.3376,
                },
                {
                  "title": "Lunch in Le Marais",
                  "description":
                      "Enjoy lunch in the trendy Le Marais district, known for its historic sites and vibrant atmosphere.",
                  "location_name": "Le Marais District",
                  "time": "13:30",
                },
                {
                  "title": "Explore Montmartre & Sacré-Cœur",
                  "description":
                      "Wander through the artistic streets of Montmartre and visit the Sacré-Cœur Basilica for panoramic city views.",
                  "location_name": "Montmartre, 75018 Paris",
                  "time": "16:00",
                  "latitude": 48.8867,
                  "longitude": 2.3431,
                },
              ],
            },
            if ((preferences['duration'] ?? 3) >= 3)
              {
                // Add day 3 if duration allows
                "day_number": 3,
                "title": "Palace & Departure",
                "activities": [
                  {
                    "title": "Versailles Palace & Gardens (Optional Half-Day)",
                    "description":
                        "Consider a trip to the magnificent Palace of Versailles. Requires travel time.",
                    "location_name":
                        "Palace of Versailles, Place d'Armes, 78000 Versailles",
                    "time": "09:30",
                    "latitude": 48.8049,
                    "longitude": 2.1204,
                  },
                  {
                    "title": "Last Minute Souvenirs & Departure",
                    "description":
                        "Enjoy some last-minute shopping or a Parisian café before heading to the airport/station.",
                    "location_name": "Various locations / Airport / Station",
                    "time": "15:00",
                  },
                ],
              },
          ],
        }),
      );
    } else {
      // Generic fallback mock response
      return Future.value(
        jsonEncode({
          "title": "AI Trip to ${preferences['destination']}",
          "location": preferences['destination'],
          "duration_days": preferences['duration'] ?? 2,
          "is_public": false,
          "description":
              "A wonderful ${preferences['duration'] ?? 2}-day trip to ${preferences['destination']} based on your interests in ${preferences['interests']}.",
          "cover_image_url":
              "https://images.unsplash.com/photo-1503220317375-aaad61436b1b?q=80&w=1200", // Generic travel image
          "latitude": null, // Could be fetched or left null
          "longitude": null,
          "price_level": _getMockPriceLevel(preferences['budget']),
          "days": List.generate(
            preferences['duration'] ?? 2,
            (index) => {
              "day_number": index + 1,
              "title":
                  "Day ${index + 1}: Exploring ${preferences['destination']}",
              "activities": [
                {
                  "title":
                      "Morning Exploration based on ${preferences['interests']}",
                  "description":
                      "Discover local attractions aligning with your interests.",
                  "location_name": "Central ${preferences['destination']}",
                  "time": "10:00",
                },
                {
                  "title": "Lunch at a local spot",
                  "description": "Enjoy local cuisine.",
                  "location_name": "Recommended Restaurant",
                  "time": "13:00",
                },
                {
                  "title": "Afternoon Activity: ${preferences['interests']}",
                  "description":
                      "Engage in an activity related to ${preferences['interests']}.",
                  "location_name":
                      "Specific venue in ${preferences['destination']}",
                  "time": "15:00",
                },
              ],
            },
          ),
        }),
      );
    }

    // Simulate an HTTP POST request (actual request is commented out)
    /*
    try {
      final response = await http.post(
        Uri.parse(_mockApiUrl),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'prompt': prompt, 'preferences': preferences}),
      );

      if (response.statusCode == 200) {
        return response.body;
      } else {
        throw Exception('Failed to generate itinerary: ${response.statusCode} ${response.body}');
      }
    } catch (e) {
      _logger.e('Error in generateItineraryRaw: $e');
      throw Exception('Failed to connect to AI service: $e');
    }
    */
  }

  int _getMockPriceLevel(String? budget) {
    switch (budget?.toLowerCase()) {
      case 'budget':
        return 1;
      case 'luxury':
        return 3;
      case 'mid-range':
      default:
        return 2;
    }
  }

  TripModel? parseApiResponse(String rawJson, String currentUserId) {
    try {
      final Map<String, dynamic> jsonResponse = jsonDecode(rawJson);

      final List<TripDayModel> tripDays = [];
      if (jsonResponse['days'] is List) {
        for (var dayData in (jsonResponse['days'] as List)) {
          if (dayData is Map<String, dynamic>) {
            final List<TripActivityModel> activities = [];
            if (dayData['activities'] is List) {
              for (var activityData in (dayData['activities'] as List)) {
                if (activityData is Map<String, dynamic>) {
                  activities.add(
                    TripActivityModel(
                      id: _uuid.v4(), // Generate new ID
                      tripDayId:
                          '', // This will be set when day is created, or handled by backend
                      title: activityData['title'] ?? 'Unnamed Activity',
                      description: activityData['description'],
                      location:
                          activityData['location_name'], // Map location_name to location
                      time: activityData['time'],
                      // latitude: (activityData['latitude'] as num?)?.toDouble(), // TODO: Fix this
                      // longitude: (activityData['longitude'] as num?)?.toDouble(), // TODO: Fix this
                      createdAt: DateTime.now(),
                      updatedAt: DateTime.now(),
                      // photoUrls: [], // AI won't generate photos // TODO: Fix this
                    ),
                  );
                }
              }
            }
            tripDays.add(
              TripDayModel(
                id: _uuid.v4(), // Generate new ID
                tripId: '', // This will be set when trip is created
                dayNumber: dayData['day_number'] ?? 0,
                title: dayData['title'] ?? 'Unnamed Day',
                activities: activities,
                createdAt: DateTime.now(),
                updatedAt: DateTime.now(),
              ),
            );
          }
        }
      }

      return TripModel(
        id: _uuid
            .v4(), // Generate new ID, will be overridden by Supabase on insert
        title: jsonResponse['title'] ?? 'AI Generated Trip',
        description: jsonResponse['description'],
        location: jsonResponse['location'] ?? 'Unknown Location',
        region: jsonResponse['region'], // AI might not provide this
        days: jsonResponse['duration_days'] ?? tripDays.length,
        priceLevel: (jsonResponse['price_level'] as int?) ?? 2,
        avgRating: 0.0, // New trip, no ratings yet
        coverImageUrl: jsonResponse['cover_image_url'],
        thumbnailUrl:
            jsonResponse['cover_image_url'], // Use cover as thumbnail initially
        isPublic: jsonResponse['is_public'] ?? false, // Default to private
        userId: currentUserId, // Set current user as owner
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
        author:
            null, // Author details not generated by AI, will be set if needed by app logic
        tripDays: tripDays,
        comments: [],
        likeCount: 0,
        ratingCount: 0,
        isLikedByCurrentUser: false,
        isSavedByCurrentUser: false,
        userRating: null,
        // latitude: (jsonResponse['latitude'] as num?)?.toDouble(), // TODO: Fix this
        // longitude: (jsonResponse['longitude'] as num?)?.toDouble(), // TODO: Fix this
      );
    } catch (e) {
      // _logger.e('Error parsing AI response: $e');
      // print('Error parsing AI response: $e'); // Removed print statement
      return null;
    }
  }
}
