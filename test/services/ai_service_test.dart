import 'dart:convert';
import 'package:flutter_test/flutter_test.dart';
import 'package:weekend_gateway/models/trip_activity_model.dart';
import 'package:weekend_gateway/models/trip_day_model.dart';
import 'package:weekend_gateway/models/trip_model.dart';
import 'package:weekend_gateway/services/ai_service.dart';

void main() {
  late AIService aiService;
  const String testUserId = 'test-user-id';

  setUp(() {
    aiService = AIService();
  });

  group('AIService parseApiResponse', () {
    test('parses valid Paris mock JSON correctly', () {
      final mockParisResponse = {
        "title": "AI Generated Paris Weekend",
        "location": "Paris, France",
        "duration_days": 3,
        "is_public": false,
        "description": "An amazing 3-day trip to Paris, generated by AI.",
        "cover_image_url": "https://images.unsplash.com/photo-1502602898657-3e91760cbb34?q=80&w=1200",
        "latitude": 48.8566,
        "longitude": 2.3522,
        "price_level": 2,
        "days": [
          {
            "day_number": 1,
            "title": "Arrival & Iconic Landmarks",
            "activities": [
              {
                "title": "Arrive in Paris & Check-in",
                "description": "Settle into your accommodation.",
                "location_name": "Your Hotel",
                "time": "14:00"
              },
              {
                "title": "Eiffel Tower Experience",
                "description": "Visit the iconic Eiffel Tower.",
                "location_name": "Eiffel Tower",
                "time": "16:00",
                "latitude": 48.8584,
                "longitude": 2.2945
              }
            ]
          },
          {
            "day_number": 2,
            "title": "Art & Culture",
            "activities": [
              {
                "title": "Louvre Museum Visit",
                "description": "Explore masterpieces.",
                "location_name": "Louvre Museum",
                "time": "10:00",
                "latitude": 48.8606,
                "longitude": 2.3376
              }
            ]
          }
        ]
      };

      final rawJson = jsonEncode(mockParisResponse);
      final trip = aiService.parseApiResponse(rawJson, testUserId);

      expect(trip, isNotNull);
      expect(trip, isA<TripModel>());
      expect(trip!.title, "AI Generated Paris Weekend");
      expect(trip.location, "Paris, France");
      expect(trip.days, 3);
      expect(trip.isPublic, false);
      expect(trip.userId, testUserId);
      expect(trip.priceLevel, 2);
      expect(trip.latitude, 48.8566);
      expect(trip.longitude, 2.3522);
      expect(trip.tripDays.length, 2);

      final day1 = trip.tripDays[0];
      expect(day1.dayNumber, 1);
      expect(day1.title, "Arrival & Iconic Landmarks");
      expect(day1.activities.length, 2);
      expect(day1.activities[0].title, "Arrive in Paris & Check-in");
      expect(day1.activities[1].location, "Eiffel Tower");
      expect(day1.activities[1].latitude, 48.8584);

      final day2 = trip.tripDays[1];
      expect(day2.dayNumber, 2);
      expect(day2.activities.length, 1);
      expect(day2.activities[0].title, "Louvre Museum Visit");
    });

    test('parses generic mock JSON correctly', () {
      final preferences = {'destination': 'Mars', 'duration': 2, 'interests': 'rocks', 'budget': 'luxury'};
      final mockGenericResponse = {
        "title": "AI Trip to ${preferences['destination']}",
        "location": preferences['destination'],
        "duration_days": preferences['duration'],
        "is_public": false,
        "description": "A wonderful ${preferences['duration']}-day trip to ${preferences['destination']}.",
        "cover_image_url": "https://images.unsplash.com/photo-1503220317375-aaad61436b1b?q=80&w=1200",
        "latitude": null,
        "longitude": null,
        "price_level": 3, // luxury
        "days": List.generate(preferences['duration'] as int, (index) => {
          "day_number": index + 1,
          "title": "Day ${index + 1}: Exploring ${preferences['destination']}",
          "activities": [
            {"title": "Morning Rock Gazing", "description": "Look at rocks.", "location_name": "Big Rock Area", "time": "10:00"},
            {"title": "Martian Lunch", "description": "Eat space food.", "location_name": "Crater Diner", "time": "13:00"}
          ]
        })
      };
      final rawJson = jsonEncode(mockGenericResponse);
      final trip = aiService.parseApiResponse(rawJson, testUserId);

      expect(trip, isNotNull);
      expect(trip!.title, "AI Trip to Mars");
      expect(trip.days, 2);
      expect(trip.priceLevel, 3);
      expect(trip.tripDays.length, 2);
      expect(trip.tripDays[0].activities.length, 2);
      expect(trip.tripDays[0].activities[0].title, "Morning Rock Gazing");
    });

    test('returns null for invalid JSON structure', () {
      final invalidJson = jsonEncode({"message": "This is not a trip object"});
      final trip = aiService.parseApiResponse(invalidJson, testUserId);
      expect(trip, isNull);
    });

    test('returns null for completely invalid JSON string', () {
      const invalidJsonString = "this is not json";
      final trip = aiService.parseApiResponse(invalidJsonString, testUserId);
      expect(trip, isNull);
    });
    
    test('handles missing optional fields gracefully', () {
      final mockResponseMissingFields = {
        "title": "Minimal Trip",
        "location": "A Place",
        "duration_days": 1,
        "user_id": testUserId, 
        // description, cover_image_url, latitude, longitude, price_level, region are missing
        "days": [
          {
            "day_number": 1,
            "title": "Day One",
            "activities": [
              {
                "title": "Only Activity",
                // description, location_name, time, lat, long are missing
              }
            ]
          }
        ]
      };
      final rawJson = jsonEncode(mockResponseMissingFields);
      final trip = aiService.parseApiResponse(rawJson, testUserId);

      expect(trip, isNotNull);
      expect(trip!.title, "Minimal Trip");
      expect(trip.description, isNull);
      expect(trip.coverImageUrl, isNull);
      expect(trip.priceLevel, 2); // Default price level
      expect(trip.tripDays.first.activities.first.description, isNull);
      expect(trip.tripDays.first.activities.first.location, isNull);
    });
  });
}
